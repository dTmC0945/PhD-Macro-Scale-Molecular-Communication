function [inputMatrix, probabilityMatrix, dataPoints] = decodingSimulation2D(levelCounter, bitLength, symbolDuration, noisedSignal, normal, randomBits1, randomBits2)
    
    dataPoints          = zeros(1, bitLength);
    Decoded             = zeros(1               ,bitLength);                               % Decoded
    Cecoded             = zeros(1               ,bitLength);        
    inputAlphabet       = zeros(levelCounter   ,levelCounter);       % Input Alph.
    Alphabet            = zeros(levelCounter   ,levelCounter);       % Alpabet    
    inputMatrix         = zeros(000000000000000 + 1,levelCounter^2 + 1);
    probabilityMatrix   = zeros(levelCounter^2 + 1,levelCounter^2 + 1);

    
    % Generating discrete received values from the transmission

    for message_operator = 2:1:bitLength
                dataPoints(message_operator) = ...
                    noisedSignal(symbolDuration*message_operator)*normal...
                  + complex(levelCounter + 1, levelCounter + 1); 
    end

    % Generation of the symbol values for use in communications

    for a = 1:1:levelCounter^2 % Number of symbol values       
        Alphabet(a) = a - 1;        
    end

    % Naming of the symbol for each constellation values

    alphabetCounter = 1;

    for a = 1:1:levelCounter % In-phase value        
        for b = 1:1:levelCounter  % Out-phase value          
            inputAlphabet(a,b) = Alphabet(alphabetCounter);            
            alphabetCounter = alphabetCounter + 1;
        end
    end

    % Decoded Values

    dataPointsReal = real(dataPoints); % real
    dataPointsImag = imag(dataPoints); % imaginary


    for dec = 2:1:bitLength    
        for a = 1:1:levelCounter   
            for b = 1:1:levelCounter 
                if dataPointsReal(dec) < 3 && ...
                   dataPointsImag(dec) < 3
                    Decoded(dec) = inputAlphabet(1,1);
                elseif dataPointsReal(dec) > 2*levelCounter - 1 && ...
                       dataPointsImag(dec) > 2*levelCounter - 1
                    Decoded(dec) = ...
                        inputAlphabet(levelCounter, levelCounter);
                elseif dataPointsReal(dec) > 2*levelCounter - 1 && ...
                       dataPointsImag(dec) < 3
                    Decoded(dec) = ...
                        inputAlphabet(levelCounter, 1);
                elseif dataPointsReal(dec) < 3 && ...
                       dataPointsImag(dec) > 2*levelCounter - 1
                    Decoded(dec) = ...
                        inputAlphabet(1, levelCounter);
                elseif dataPointsReal(dec) > 2*a - 1 && ...
                       dataPointsReal(dec) < 2*a + 1 && ...
                       dataPointsImag(dec) > 2*levelCounter + 1
                    Decoded(dec) = ...
                        inputAlphabet(a ,levelCounter);
                elseif dataPointsReal(dec) > 2*a - 1 && ...
                       dataPointsReal(dec) < 2*a + 1 && ...
                       dataPointsImag(dec) < 3
                    Decoded(dec) = ...
                        inputAlphabet(a ,1);
                elseif dataPointsImag(dec) > 2*b - 1 && ...
                       dataPointsImag(dec) < 2*b + 1 && ...
                       dataPointsReal(dec) > 2*levelCounter + 1
                    Decoded(dec) = ...
                        inputAlphabet(levelCounter, b);
                elseif dataPointsImag(dec) > 2*b - 1 && ...
                       dataPointsImag(dec) < 2*b + 1 && ...
                       dataPointsReal(dec) < 3
                    Decoded(dec) = inputAlphabet(1, b); 
                elseif dataPointsReal(dec) > 2*a-1 && ...
                       dataPointsImag(dec) > 2*b-1 && ...
                       dataPointsReal(dec) < 2*a+1 && ...
                       dataPointsImag(dec) < 2*b+1 
                    Decoded(dec) = inputAlphabet(a,b);                 
                end
            end
        end

        for a = 1:1:levelCounter
            for b = 1:1:levelCounter
                if  randomBits1(dec) >= (2*a ...
                        - 1) ...
                 && randomBits1(dec) <= (2*a ...
                        + 1) ...
                 && randomBits2(dec) >= (2*b ...
                        - 1) ...
                 && randomBits2(dec) <= (2*b ...
                        + 1)                    
                        Cecoded(dec) = inputAlphabet(a,b);
                end               
            end
        end        
    end     % decision algorithm

    for c = 1:1:bitLength     
        for a = 1:1:levelCounter^2 + 1
            if Cecoded(c) == (a - 1)    
                inputMatrix(a) = inputMatrix(a) + 1; 
            end

            for b = 1:1:levelCounter^2 + 1          
                if Decoded(c) == (a - 1) && Cecoded(c) == (b - 1)                    
                    probabilityMatrix(a,b) = probabilityMatrix(a,b) + 1;
                end
            end
        end
    end

end